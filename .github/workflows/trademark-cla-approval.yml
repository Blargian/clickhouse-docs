name: CLA Approval Handler

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to approve CLA for'
        required: true
        type: string
  pull_request:
    types: [labeled]

permissions: write-all

jobs:
  process-cla-approval:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.label.name == 'cla-signed'

    steps:

      - name: Generate Token
        id: generate-token
        continue-on-error: true
        uses: actions/create-github-app-token@v1
        with:
          app-id: "${{ secrets.WORKFLOW_AUTH_PUBLIC_APP_ID }}"
          private-key: "${{ secrets.WORKFLOW_AUTH_PUBLIC_PRIVATE_KEY }}"

      - name: Process CLA approval
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            let prNumber;
            
            // Determine PR number
            if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt('${{ github.event.inputs.pr_number }}');
            } else if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else {
              return;
            }
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            
            // Check if the person triggering has the right permissions
            try {
              const { data: collaboration } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
            
              // Only admin, maintain, or write permissions can approve CLA
              const isAuthorized = ['admin', 'maintain', 'write'].includes(collaboration.permission);
            
              if (!isAuthorized) {
            
                // If this was a label event, remove the label
                if (context.eventName !== 'workflow_dispatch') {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    name: 'cla-signed'
                  });
                }
            
                // Add a comment explaining why the action was blocked
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `@${context.actor} Only repository maintainers can approve CLAs. ${context.eventName !== 'workflow_dispatch' ? 'The label has been removed.' : ''}`
                });
            
                return;
              }
            
              // Check if PR has cla-required label
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
            
              const hasClaMeeded = labels.some(label => label.name === 'cla-required');
            
              if (!hasClaMeeded) {
                return;
              }
            
              // Ensure cla-signed label is present
              const hasClaSigned = labels.some(label => label.name === 'cla-signed');
              if (!hasClaSigned) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['cla-signed']
                });
              }
            
              // Authorized - proceed with approval
            
              // Remove the blocking label
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: 'cla-required'
                });
              } catch (e) {
                // Label not found or already removed
              }
            
              // Check if confirmation comment already exists
              const comments = await github.rest.issues.listComments({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            
              const confirmationExists = comments.data.some(comment => 
                (comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot') && 
                comment.body.includes('CLA Agreement Confirmed')
              );
            
              if (!confirmationExists) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `## CLA Agreement Confirmed
            
              The trademark license agreement has been approved for @${pr.user.login}.
            
              **Status:** Approved  
              **Date:** ${new Date().toISOString()}  
              **Approved by:** @${context.actor}
              **Method:** ${context.eventName === 'workflow_dispatch' ? 'Manual approval' : 'Label approval'}
            
              This PR is now unblocked and can proceed with normal review!`
                });
              }
            
            } catch (error) {
              throw error;
            }
