const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const glob = promisify(require('glob'));
const matter = require('gray-matter');

async function checkFloatingPages(context, options) {
    return {
        name: 'check-floating-pages',

        async postBuild({ siteConfig, routesPaths, outDir, head }) {
            const { baseUrl } = siteConfig;
            const docsDir = path.resolve(context.siteDir, 'docs');

            let sidebarItems = [];
            const sidebarsPath = path.join(context.siteDir, 'sidebars.js');
            if (fs.existsSync(sidebarsPath)) {
                try {
                    const sidebars = require(sidebarsPath);
                    sidebarItems = getSidebarItems(sidebars);
                } catch (err) {
                    console.error("Error loading sidebars.js", err);
                    throw err; // Stop the build
                }
            }

            const markdownFiles = await glob(path.join(docsDir, '**/*.md'));
            const floatingPages = [];

            for (const filePath of markdownFiles) {
                const fileContent = fs.readFileSync(filePath, 'utf-8');
                const { data } = matter(fileContent);

                const relativePath = path.relative(docsDir, filePath).replace(/\\/g, '/').replace(/\.md$/, '');

                // Check 1: Explicit sidebar_position or id in frontmatter
                if (data.sidebar_position || data.id) {
                    const idToCheck = data.id || relativePath;
                    if (!sidebarItems.includes(idToCheck)) {
                        floatingPages.push(filePath);
                    }
                } else {
                    //Check 2: Implicit.
                    if (!sidebarItems.includes(relativePath)) {
                        floatingPages.push(filePath);
                    }
                }
            }

            if (floatingPages.length > 0) {
                console.error('\x1b[31m%s\x1b[0m', 'Floating pages found:');
                floatingPages.forEach(page => console.error(`  - ${page}`));
                if (options && options.failBuild) {
                    throw new Error('Floating pages found. See above for details.');
                }
            } else {
                console.log('\x1b[32m%s\x1b[0m', 'No floating pages found.');
            }
        }
    }
}

function getSidebarItems(sidebarConfig) {
    let items = []
    function traverse(item) {
        if (item.type === 'doc') {
            items.push(item.id);
        } else if (item.type === 'category' || item.type === 'autogenerated') {
            (item.items || []).forEach(traverse);
        } else if (item.type === 'link') {
            // no need to worry about links
        }
    }
    // sidebarConfig can be an array or an object
    if (Array.isArray(sidebarConfig)) {
        sidebarConfig.forEach(traverse);
    } else {
        Object.values(sidebarConfig).forEach(sidebar => {
            sidebar.forEach(traverse)
        })
    }
    return items;
}

module.exports = checkFloatingPages;