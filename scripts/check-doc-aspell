#!/usr/bin/env bash

check_aspell_dict_header() {
    local dict_file="$1"
    local expected_lang="$2"

    if [[ ! -f "$dict_file" ]]; then
        echo "Error: Dictionary file '$dict_file' does not exist"
        return 1
    fi

    local first_line=$(head -n 1 "$dict_file")

    # Check if first line matches the expected format: personal_ws-1.1 LANG NUMBER
    if [[ ! "$first_line" =~ ^personal_ws-1\.1[[:space:]]+${expected_lang}[[:space:]]+[0-9]+$ ]]; then
        echo "Error: Dictionary file '$dict_file' missing or invalid header"
        echo "Expected format: personal_ws-1.1 ${expected_lang} <word_count>"
        echo "Found: $first_line"
        return 1
    fi

    return 0
}

echo "Checking spelling using aspell"

# Only support OSX and Linux for now
OS=$(uname | tr '[:upper:]' '[:lower:]')
if [[ "$OS" != "darwin" && "$OS" != "linux" ]]; then
    echo "Unsupported OS: $OS"
    exit 1
fi

# Check if aspell is installed
if ! command -v aspell &> /dev/null; then
    echo "Error: aspell is not installed. Please install it using your package manager:"
    echo "  macOS: brew install aspell"
    echo "  Linux (Debian/Ubuntu): sudo apt install aspell"
    echo "  Linux (Fedora/RHEL): sudo dnf install aspell"
    exit 1
fi


# Perform spell checking on the docs
if [[ ${1:-} == "--help" ]] || [[ ${1:-} == "-h" ]]; then
    echo "Usage $0 [--help|-h] [-i [filename]]"
    echo "  --help|-h: print this help"
    echo "  -i: interactive mode. If filename is specified, check only this file, otherwise check all files"
    exit 0
fi

ROOT_PATH=$(git rev-parse --show-toplevel)

CHECK_LANG=en
ASPELL_DICT_FILE="${ROOT_PATH}/scripts/aspell-dict-file.txt"
ASPELL_IGNORE_PATH="${ROOT_PATH}/scripts/aspell-ignore/${CHECK_LANG}"

# Check if main aspell dictionary has proper header
if ! check_aspell_dict_header "${ASPELL_IGNORE_PATH}/aspell-dict.txt" "$CHECK_LANG"; then
    echo "Please ensure aspell-dict.txt has the proper header format"
    exit 1
fi

# Function to get a list of files
get_files_to_check() {
    if [[ ! -z ${1:-} ]]; then
        echo "${ROOT_PATH}/${1}"
    else
        find "${ROOT_PATH}/docs" -type f -name "*.md"
    fi
}

# Function to read per-file ignore options from aspell-dict-file.txt
get_ignore_words_for_file() {
    local file=$1
    local relative_path="${file#$ROOT_PATH/}"
    local ignore_words=("ClickHouse") # Ensure "ClickHouse" is always included

    # Read aspell-dict-file.txt and extract the ignore words for the given file
    local inside_target_section=false
    while IFS= read -r line; do
        if [[ $line == "--${relative_path}--" ]]; then
            inside_target_section=true
        elif [[ $line == --*-- ]]; then
            inside_target_section=false
        elif $inside_target_section; then
            ignore_words+=("$line")
        fi
    done < "$ASPELL_DICT_FILE"

    # Join ignore words with newlines for Aspell's filtering
    printf "%s\n" "${ignore_words[@]}"
}

# Use this to filter out lines we don't wanna consider in spell-check - slugs, imports, and img src JSX elements
preprocess_file() {
    local file=$1

    # Remove YAML frontmatter (everything between the first --- and second --- lines)
    # Then apply other existing filters
    awk '
    BEGIN {
        in_frontmatter = 0
        frontmatter_ended = 0
    }
    # If first line is ---, we are starting frontmatter
    /^---$/ && NR == 1 {
        in_frontmatter = 1
        next
    }
    # If we encounter --- while in frontmatter, end it
    /^---$/ && in_frontmatter {
        in_frontmatter = 0
        frontmatter_ended = 1
        next
    }
    # Print lines only if not in frontmatter
    !in_frontmatter { print }
    ' "$file" \
        | sed -E 's/\{#[^}]*\}//g' \
        | sed -E 's/<[A-Za-z0-9_]+svg[^>]*\/?>//g' \
        | sed -E 's/<Image[^>]*\/?>//g' \
        | grep -Ev '(^[[:space:]]*(slug:|<img src=\{[^}]+\})|^import .* from .*)' \
        | grep -Ev '(^<details>|^<summary>)'
}

# List of files to ignore
IGNORE_LIST=(
    "${ROOT_PATH}/docs/about-us/adopters.md"
    "${ROOT_PATH}/docs/integrations/data-visualization.md"
    "${ROOT_PATH}/docs/integrations/index.mdx"
    "${ROOT_PATH}/docs/whats-new/security-changelog.md"
    "${ROOT_PATH}/docs/cloud/changelogs/*"
    "${ROOT_PATH}/docs/whats-new/changelog/*" # ignore all changelogs
    "${ROOT_PATH}/docs/cloud/reference/01_changelog/*"
    "${ROOT_PATH}/docs/sql-reference/*" # we ignore all files from ClickHouse/ClickHouse
    "${ROOT_PATH}/docs/engines/*"
    "${ROOT_PATH}/docs/getting-started/*"
    "${ROOT_PATH}/docs/development/*"
    "${ROOT_PATH}/docs/operations/*"
    "${ROOT_PATH}/docs/interfaces/*"
    "${ROOT_PATH}/docs/ru/*"
    "${ROOT_PATH}/docs/zh/*"
    "${ROOT_PATH}/docs/cloud/manage/api/*" # api files
    "${ROOT_PATH}/docs/index.md"
    "${ROOT_PATH}/docs/about-us/beta-and-experimental-features.md"
    # Add more files to ignore here, e.g.:
    # "${ROOT_PATH}/docs/some-other-file.md"
)

# Function to check if a file is in the ignore list
is_ignored() {
    local file=$1
    for ignored_pattern in "${IGNORE_LIST[@]}"; do
        if [[ "$file" == $ignored_pattern ]]; then
            return 0 # File matches an ignore pattern
        fi
    done
    return 1 # File does not match any ignore patterns
}

if [[ ${1:-} == "-i" ]]; then
    FILES_TO_CHECK=$(get_files_to_check "$2")

    for fname in ${FILES_TO_CHECK}; do
        if is_ignored "$fname"; then
            #echo "Skipping $fname"
            continue
        fi

        echo "Checking $fname"

        # Fetch ignore words for the file and make custom dict
        ignore_words=$(get_ignore_words_for_file "$fname")
        word_count=$(echo "$ignore_words" | wc -w)
        temp_dict="${ROOT_PATH}/aspell.tmp.dict"
        echo "personal_ws-1.1 ${CHECK_LANG} $word_count" > "$temp_dict" # Add header with word count
        echo "$ignore_words" | tr ' ' '\n' >> "$temp_dict"            # Add words, one per line

        # Run Aspell with the custom dictionary
        temp_file=$(mktemp)
        preprocess_file "$fname" > "$temp_file"

        aspell -c "$temp_file" \
            --personal=aspell-dict.txt \
            --add-sgml-skip=code \
            --encoding=utf-8 \
            --mode=markdown \
            -W 3 \
            --lang=${CHECK_LANG} \
            --home-dir=${ASPELL_IGNORE_PATH} \
            --extra-dicts="$temp_dict"

        # Replace the original file with the corrected content if modified
        mv "$temp_file" "$fname"

        # Clean up the temporary dictionary file
        rm "${ROOT_PATH}/aspell.tmp.dict"
    done
    exit
fi

STATUS=0
FILES_TO_CHECK=$(get_files_to_check "$1")
for fname in $FILES_TO_CHECK; do
    if is_ignored "$fname"; then
        #echo "Skipping $fname"
        continue
    fi
    ignore_words=$(get_ignore_words_for_file "$fname")
    errors=$(preprocess_file "$fname" \
        | aspell list \
            -W 3 \
            --personal=aspell-dict.txt \
            --add-sgml-skip=code \
            --encoding=utf-8 \
            --mode=markdown \
            --lang=${CHECK_LANG} \
            --home-dir=${ASPELL_IGNORE_PATH} \
        | grep -vF "$ignore_words" \
        | sort | uniq)
    if [ ! -z "$errors" ]; then
        STATUS=1
        echo "====== $fname ======"
        echo "$errors"
    fi
done

if (( STATUS != 0 )); then
    echo "====== Errors found ======"
    echo "To exclude some words add them to the dictionary file \"${ASPELL_IGNORE_PATH}/aspell-dict.txt\""
    echo "Alternatively add them to the file specific dictionary file \"${ASPELL_DICT_FILE}\""
    echo "You can also run '$(realpath --relative-base=${ROOT_PATH} ${0}) -i' to see the errors interactively and fix them or add to the dictionary file"
fi

exit ${STATUS}
