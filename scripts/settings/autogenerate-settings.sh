#! ./bin/bash

SCRIPT_NAME=$(basename "$0")

handle_error() {
  echo -e "\033[0;31m[$SCRIPT_NAME] An error occurred: $1"
  exit 1
}

echo "[$SCRIPT_NAME] Autogenerating settings"

# Install ClickHouse
if [ ! -f ./clickhouse ]; then
  echo -e "[$SCRIPT_NAME] Installing ClickHouse binary\n"
  curl https://clickhouse.com/ | sh
fi


EXPERIMENTAL_NOTE=":::warning
This feature is in experimental stage. Only intended for developers and ClickHouse enthusiasts. The feature might or might not work and could be removed at any time.
:::"

BETA_NOTE=":::note
This feature is beta stage. The outcome of using it together with other features is unknown and correctness is not guaranteed. Testing and reports are welcome.
:::"


# Autogenerate Format settings
./clickhouse -q "
WITH
'scripts/settings/FormatFactorySettings.h' AS cpp_file,
settings_from_cpp AS
(
    SELECT extract(line, 'DECLARE\\(\\w+, (\\w+),') AS name
    FROM file(cpp_file, LineAsString)
    WHERE match(line, '^\\s*DECLARE\\(')
),
main_content AS
(
    SELECT format('## {} {}\\n\\nType: {}\\n\\nDefault value: {}\\n\\n{}{}\\n\\n',
                  name, '{#'||name||'}', type, default, multiIf(tier == 'Experimental', '${EXPERIMENTAL_NOTE}\n\n', tier == 'Beta', '${BETA_NOTE}\n\n', ''), trim(BOTH '\\n' FROM description))
    FROM system.settings WHERE name IN settings_from_cpp
    ORDER BY name
),
'---
title: Format Settings
sidebar_label: Format Settings
slug: /en/operations/settings/formats
toc_max_heading_level: 2
---
<!-- Autogenerated -->
These settings are autogenerated from [source](https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/FormatFactorySettings.h).
' AS prefix
SELECT prefix || (SELECT groupConcat(*) FROM main_content)
INTO OUTFILE 'docs/en/operations/settings/settings-formats.md' TRUNCATE FORMAT LineAsString
" || handle_error "oh no, something went wrong while generating Format settings"

# Autogenerate core settings
./clickhouse -q "
WITH
'scripts/settings/Settings.cpp' AS cpp_file,
settings_from_cpp AS
(
    SELECT extract(line, 'DECLARE\\(\\w+, (\\w+),') AS name
    FROM file(cpp_file, LineAsString)
    WHERE match(line, '^\\s*DECLARE\\(')
),
main_content AS
(
    SELECT format('## {} {}\\n\\nType: {}\\n\\nDefault value: {}\\n\\n{}{}\\n\\n',
                  name, '{#'||name||'}', type, default, multiIf(tier == 'Experimental', '${EXPERIMENTAL_NOTE}\n\n', tier == 'Beta', '${BETA_NOTE}\n\n', ''), trim(BOTH '\\n' FROM description))
    FROM system.settings WHERE name IN settings_from_cpp
    ORDER BY name
),
'---
title: Core Settings
sidebar_label: Core Settings
slug: /en/operations/settings/settings
toc_max_heading_level: 2
---
<!-- Autogenerated -->
All below settings are also available in table [system.settings](/docs/en/operations/system-tables/settings). These settings are autogenerated from [source](https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/Settings.cpp).
' AS prefix
SELECT prefix || (SELECT groupConcat(*) FROM main_content)
INTO OUTFILE 'docs/en/operations/settings/settings.md' TRUNCATE FORMAT LineAsString
" || handle_error "oh no, something went wrong while generating core settings"

# Delete ClickHouse
if [ -f ./clickhouse ]; then
  echo -e "\n[$SCRIPT_NAME] Deleting ClickHouse binary"
  rm ./clickhouse
fi

# Cleanup files used to autogenerate settings
rm scripts/settings/FormatFactorySettings.h &&
rm scripts/settings/Settings.cpp || handle_error "could not delete source files used to autogenerate settings"

echo -e "[$SCRIPT_NAME] \033[0;32mAuto generation of settings completed successfully\033[0m"
