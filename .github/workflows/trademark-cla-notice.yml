name: Trademark CLA Notice

on:
  pull_request:
    types: [opened, edited, synchronize]

# Set repository-level permissions
permissions: write-all

jobs:
  enforce-docs-cla:
    runs-on: ubuntu-latest
    # Job-level permissions (inherits from above but can be more restrictive)
    permissions: write-all

    steps:
      - name: Generate Token
        id: generate-token
        continue-on-error: true
        uses: actions/create-github-app-token@v1
        with:
          app-id: "${{ secrets.WORKFLOW_AUTH_PUBLIC_APP_ID }}"
          private-key: "${{ secrets.WORKFLOW_AUTH_PUBLIC_PRIVATE_KEY }}"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use the GitHub App token if available, otherwise fallback to GITHUB_TOKEN
          token: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: Check if docs changed
        id: docs-changed
        if: github.event_name == 'pull_request'
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha}} ${{ github.event.pull_request.head.sha}})
          
          if echo "$changed_files" | grep -E '^docs/integrations/|^docs/static/' > /dev/null; then
            echo "docs_changed=true" >> $GITHUB_OUTPUT
            echo "requires_cla=true" >> $GITHUB_OUTPUT
          else
            echo "docs_changed=false" >> $GITHUB_OUTPUT
            echo "requires_cla=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR info for comment events
        id: pr-info
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_PAT || secrets.GITHUB_TOKEN }}
          script: |
            if (context.payload.issue.pull_request) {
              const prNumber = context.payload.issue.number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
            
              const hasDocsChanges = files.some(file => 
                file.filename.startsWith('docs/integrations/') ||
                file.filename.startsWith('static/images/')
              );
            
              // Check if PR author is a collaborator (safer alternative to org membership)
              let isClickHouseMember = false;
              try {
                const { data: collaboration } = await github.rest.repos.getCollaboratorPermissionLevel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  username: pr.user.login
                });
            
                // Consider admin, maintain, or write permissions as "member"
                isClickHouseMember = ['admin', 'maintain', 'write'].includes(collaboration.permission);
              } catch (error) {
                console.log(`Could not determine collaboration status for ${pr.user.login}: ${error.message}`);
                isClickHouseMember = false;
              }
            
              core.setOutput('pr_number', prNumber);
              core.setOutput('has_docs_changes', hasDocsChanges);
              core.setOutput('pr_head_sha', pr.head.sha);
              core.setOutput('pr_author', pr.user.login);
              core.setOutput('isClickHouseMember', isClickHouseMember);

              return { prNumber, hasDocsChanges, headSha: pr.head.sha, author: pr.user.login, isClickHouseMember };
            }
            
            return null;

      - name: Post CLA comment and block merge
        if: github.event_name == 'pull_request' && steps.docs-changed.outputs.requires_cla == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          script: |
            let prNumber, prAuthor;
            
            if (context.eventName == 'pull_request') {
              prNumber = context.issue.number;
              prAuthor = '${{ github.event.pull_request.user.login }}';
            }
            
            if (!prNumber || !prAuthor) {
              return;
            }
            
            try {
              // Check if user is in @ClickHouse/everyone team
              let isClickHouseMember = false;
              try {
                await github.rest.teams.getMembershipForUserInOrg({
                  org: 'ClickHouse',
                  team_slug: 'everyone',
                  username: prAuthor
                });
                isClickHouseMember = true;
              } catch (error) {
                // User is not in the team or team doesn't exist
                isClickHouseMember = false;
              }
              
              // Skip CLA requirement for ClickHouse team members
              if (isClickHouseMember) {
                return;
              }
              
              // Check if CLA comment already exists
              const comments = await github.rest.issues.listComments({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            
              const existingClaComment = comments.data.find(comment => 
                (comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot') && 
                comment.body.includes('CLA Agreement Required - MERGE BLOCKED')
              );
            
              if (!existingClaComment && context.eventName === 'pull_request') {
                const claText = '# Trademark License Addendum

Merging of this pull request is temporarily blocked. Please 
read and agree to the Trademark License Addendum below to 
unblock merging of this pull request.

<details>
<summary>Click to see Trademark License Addendum</summary>

This Trademark License Addendum ("Addendum") shall, if You have opted 
in by replying to the comment that references this Addendum that you
have read and agree to theContributor License Agreement Addendum,
supplement the terms of the Individual Contributor License Agreement
between You and the Company ("Agreement"). Capitalized terms not
defined herein shall have the meanings ascribed to them in the 
Agreement.

1. Grant of Trademark License. Subject to the terms and conditions 
of this Addendum, You grant to the Company a revocable, worldwide,
non-exclusive, non-sublicensable (except for contractors or agents
acting on the Company's behalf, for whose compliance with this 
Addendum Company agrees to be responsible), royalty-free, and non-transferable
right to display the Partner Trademarks, solely for the purpose of
marketing and promoting your Contribution (i) on the Company's website
and in any Company in-product integrations page; and (ii) in marketing, sales,
and product materials for Company products. “Partner Trademarks” mean Your 
employer’s name and any employer brand features (e.g., logo) You submit now or 
in the future to the Company in connection with your Contributions.
2. Legal authority. You represent that you are legally entitled to
grant the above license. If your employer(s) has rights to 
intellectual property in the Partner Trademarks, you represent that
you have received permission to grant the above license on behalf 
of that employer, or that your employer has executed a separate 
agreement with the Company concerning the subject matter of this 
Addendum.
3. Conditions. The license in Section 1 is subject to the following
conditions:
i. The Company shall use the Partner Trademarks in accordance with
   any reasonable trademark usage guidelines You provide;
ii. You may revoke this license at any time upon thirty (30) days'
    written notice to the Company, after which the Company shall use
    commercially reasonable efforts to cease all further public
    use of the Partner Trademarks (but may maintain uses in archived
    web pages, changelogs, and previously distributed materials).
iii. The Company acknowledges and agrees that it does not own the 
     Partner Trademarks and that all goodwill derived from the use 
     of the Partner Trademarks inures solely to benefit of the 
     Partner Trademarks' owner(s).
iv. The Company shall use the Partner Trademarks in a professional
    manner consistent with industry standards and shall not use 
    them in any way that would reasonably be expected to diminish 
    their value or harm the reputation of the Partner Trademarks' 
    owner(s). The Company's use of Partner Trademarks shall not 
    imply endorsement, sponsorship, or affiliation beyond the 
    existence of the Contribution in the Company's integration program.
v. The Company will not use the Partner Trademarks in connection 
   with search engine rankings, ad word purchases, or as part of a
   trade name, business name, or Internet domain name.

</details>

**To unblock this PR, reply with exactly:**' + ````
I agree to the Trademark License Addendum
CLA-SIGNATURE: ${prAuthor}
````;
      
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: claText
                });
            
                await github.rest.issues.addLabels({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['cla-required', 'integrations-with-image-change']
                });
              }
            } catch (error) {
              console.error('Error in CLA comment step:', error);
              throw error;
            }